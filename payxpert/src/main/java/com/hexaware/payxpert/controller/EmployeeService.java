/**
 * The EmployeeService class provides functionality to interact with the EmployeeDao
 * and perform operations related to employee management, such as adding, retrieving,
 * updating, and removing employees.
 *
 * @author Praveen Kumar Kuruba	
 * @version 1.0
 * @since 2024-02-08
 */
package com.hexaware.payxpert.controller;

import com.hexaware.payxpert.exception.DatabaseConnectionException;
import com.hexaware.payxpert.exception.EmployeeNotFoundException;
import com.hexaware.payxpert.exception.InvalidInputException;

import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Scanner;

import com.hexaware.payxpert.dao.EmployeeDao;
import com.hexaware.payxpert.model.Employee;

public class EmployeeService implements IEmployeeService {
    EmployeeDao dao = new EmployeeDao();
  
    /**
     * Adds a new employee to the system by collecting necessary details from the user.
     * Validates input data and throws InvalidInputException if validation fails.
     * Upon successful validation, creates a new Employee object and adds it to the database.
     */

    @Override
    public void addEmployee() {
        Scanner scanner = new Scanner(System.in);
        try {
        System.out.println("Enter employee First Name: ");
        String firstName = scanner.nextLine();
        ValidationService.validateAlphabets(firstName);
        
       
            
      

        System.out.println("Enter employee Last Name: ");
        String lastName = scanner.nextLine();
        ValidationService.validateAlphabets(lastName);

        System.out.println("Enter employee Date of Birth (yyyy-mm-dd): ");
        Date dateOfBirth = parseDate(scanner.next());

        System.out.println("Enter employee Gender: ");
        String gender = scanner.next();

        System.out.println("Enter employee Email: ");
        String email = scanner.next();
        ValidationService.validateEmail(email);
        System.out.println("Enter employee Phone Number: (xxx-xxx-xxxx) ");
        String phoneNumber = scanner.next();
        ValidationService.validatePhoneNumber(phoneNumber);


        System.out.println("Enter employee address: ");
        String address = scanner.next();
        
        System.out.println("Enter employee position: ");
        String position = scanner.next();
        
        System.out.println("Enter employee Joining Date (yyyy-mm-dd): ");
        Date joiningDate = parseDate(scanner.next());


        System.out.println("Is there a termination date? (true/false): ");
        String hasTerminationDateStr = scanner.next();

        // Use a ternary operator to conditionally set terminationDate based on user input
        Date terminationDate = "false".equalsIgnoreCase(hasTerminationDateStr)
                ? null
                : parseDate(scanner.next());
       
        // Parameters passed into the employee constructor if all the validation is true
        Employee newEmployee = new Employee(
                0, // employeeID is set to 0, as it will be generated by the database
                firstName, lastName, dateOfBirth, gender,
                email, phoneNumber, address, position, joiningDate,
                terminationDate);

        dao.createEmployee(newEmployee);
        System.out.println("Employee added Successfully !!!");
        }
        catch (InvalidInputException iIE) {
            System.out.println("Invalid input please try again");
        }
    }

    
    /**
     * Parses a date string in the format "yyyy-MM-dd" into a Date object.
     *
     * @param dateStr The date string to be parsed.
     * @return A Date object representing the parsed date.
     * @throws InvalidInputException If the input date string has an invalid format.
     */
    private Date parseDate(String dateStr) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            return new Date(dateFormat.parse(dateStr).getTime());
        } catch (ParseException e) {
            System.out.println("Invalid date format. Please enter in the format yyyy-mm-dd.");
            return null;
        }
    }
    /**
     * Retrieves and displays the details of an employee based on the provided employee ID.
     *
     * @param employeeId The ID of the employee to retrieve.
     * @throws DatabaseConnectionException If there is an issue connecting to the database.
     * @throws EmployeeNotFoundException   If the employee with the given ID is not found.
     */
    
    @Override
    public void getEmployeeById(int employeeId) throws DatabaseConnectionException {
        Employee employee = dao.getEmployeeById(employeeId);

        if (employee != null) {
            System.out.println("Employee Details:");
            System.out.println(employee);
        } else {
            throw new EmployeeNotFoundException("employee not found");
        }
    }
    
    /**
     * Retrieves and displays details of all employees in the system.
     *
     * @throws DatabaseConnectionException If there is an issue connecting to the database.
     */

    @Override
    public void getAllEmployees() throws DatabaseConnectionException {
        List<Employee> employees = dao.getAllEmployees();
        for (Employee employee : employees) {
            System.out.println(employee);
        }
    }
    
    /**
     * Updates the details of an existing employee based on the provided employee ID.
     * Prompts the user for updated information, validates it, and then updates the employee record.
     *
     * @param employeeId The ID of the employee to update.
     * @throws DatabaseConnectionException If there is an issue connecting to the database.
     * @throws EmployeeNotFoundException   If the employee with the given ID is not found.
     */
    public void updateEmployee(int employeeId) throws DatabaseConnectionException {
        
        Employee existingEmployee = dao.getEmployeeById(employeeId);

        if (existingEmployee != null) {
           
            Employee updatedEmployeeData = readUpdatedEmployeeData();

           
            Employee updatedEmployee = convertToEmployee(updatedEmployeeData);

            // Check if the converted Employee is not null before updating
            if (updatedEmployee != null) {
                updatedEmployee.setEmployeeID(employeeId); 
                dao.updateEmployee(updatedEmployee);
                System.out.println("Employee updated successfully!");
            } else {
                System.out.println("Failed to update employee. Invalid data.");
            }
        } else {
        	 throw new EmployeeNotFoundException("Employee with ID " + employeeId + " not found.");	
        }
    }
    /**
     * Reads and collects updated employee data from the user.
     *
     * @return An Employee object containing the updated information.
     */
    private Employee readUpdatedEmployeeData() {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter updated employee First Name: ");
        String firstName = scanner.nextLine();
        System.out.println("Enter updated employee Last Name: ");
        String lastName = scanner.nextLine();
        System.out.println("Enter updated employee Date of Birth (yyyy-mm-dd): ");
        Date dateOfBirth = parseDate(scanner.next());
        System.out.println("Enter updated employee Gender: ");
        String gender = scanner.next();
        System.out.println("Enter updated employee Email: ");
        String email = scanner.next();
        System.out.println("Enter updated employee Phone Number: ");
        String phoneNumber = scanner.next();
        System.out.println("Enter updated employee Address: ");
        String address = scanner.next();
        System.out.println("Enter updated employee Position: ");
        String position = scanner.next();
        System.out.println("Enter updated employee Joining Date (yyyy-mm-dd): ");
        Date joiningDate = parseDate(scanner.next());
        System.out.println("Is there an updated termination date? (true/false): ");
        String hasTerminationDateStr = scanner.next();

        // Using a ternary operator to conditionally set terminationDate based on user input
        Date terminationDate = "false".equalsIgnoreCase(hasTerminationDateStr)
                ? null
                : parseDate(scanner.next());

        return new Employee(0, firstName, lastName, dateOfBirth, gender, email, phoneNumber, address, position,
                joiningDate, terminationDate);
    }
    /**
     * Converts an Employee object with updated data to the original Employee object format.
     *
     * @param employeeData The Employee object with updated data.
     * @return The original Employee object with updated information.
     */
    private Employee convertToEmployee(Employee employeeData) {
        Employee employee = new Employee();
        employee.setFirstName(employeeData.getFirstName());
        employee.setLastName(employeeData.getLastName());
        employee.setDateOfBirth(employeeData.getDateOfBirth());
        employee.setGender(employeeData.getGender());
        employee.setEmail(employeeData.getEmail());
        employee.setPhoneNumber(employeeData.getPhoneNumber());
        employee.setAddress(employeeData.getAddress());
        employee.setPosition(employeeData.getPosition());
        employee.setJoiningDate(employeeData.getJoiningDate());
        employee.setTerminationDate(employeeData.getTerminationDate());

 

        return employee;
    }

    /**
     * Removes an employee from the system based on the provided employee ID.
     *
     * @param employeeId The ID of the employee to remove.
     * @throws DatabaseConnectionException If there is an issue connecting to the database.
     * @throws EmployeeNotFoundException   If the employee with the given ID is not found.
     */
    @Override
    public void removeEmployee(int employeeId) throws DatabaseConnectionException {
       
            
            Employee existingEmployee = dao.getEmployeeById(employeeId);

            if (existingEmployee != null) {
                // Remove the employee from the database
                dao.removeEmployee(existingEmployee);
                System.out.println("Employee removed successfully!");
            } else {
                throw new EmployeeNotFoundException("Employee with ID " + employeeId + " not found.");
            }
       
    }




}
